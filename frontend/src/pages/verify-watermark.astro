---
import Layout from '../components/Layout.astro';
---

<Layout title="Loading - 透かしの確認" currentPage="verify-watermark">
        <div class="hero bg-gradient-to-r from-primary to-secondary text-primary-content rounded-lg mb-8">
            <div class="hero-content text-center py-12">
                <div class="max-w-md">
                    <h1 class="mb-5 text-4xl font-bold">🔍 透かしの確認</h1>
                    <p class="mb-5 text-lg">アップロードした画像の透かしから来歴情報を探します</p>
                </div>
            </div>
        </div>
        
        <div class="card bg-base-100 shadow-xl">
            <div class="card-body">
                <div class="upload-area border-2 border-dashed border-primary rounded-lg p-8 text-center bg-base-200 hover:bg-base-300 transition-all duration-300" 
                     ondrop="handleDrop(event)" 
                     ondragover="handleDragOver(event)" 
                     ondragenter="handleDragEnter(event)" 
                     ondragleave="handleDragLeave(event)">
                    <input type="file" id="file-input" accept="image/*" onchange="handleFileSelect(event)" class="hidden">
                    <div class="text-6xl mb-4">🎨</div>
                    <label for="file-input" class="btn btn-primary mb-4">画像をアップロード</label>
                    <p class="text-base-content/70">または画像をここにドラッグ&ドロップ</p>
                    <p class="text-sm text-base-content/50 mt-2">対応形式: JPEG, PNG, WebP</p>
                </div>
                
                <div id="selected-file" class="hidden mt-6 p-4 bg-base-200 rounded-lg">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-3">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-success" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <span id="file-name" class="font-medium"></span>
                        </div>
                        <button onclick="clearFile()" class="btn btn-sm btn-ghost">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                
                <div class="card-actions justify-end mt-6">
                    <button id="verify-btn" onclick="verifyWatermark()" class="btn btn-accent btn-lg" disabled>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        検証開始
                    </button>
                </div>
            </div>
        </div>
        
        <div id="result" class="hidden mt-8"></div>
    
    <script>
        // Load app name from API
        fetch('/api/verify-watermark')
            .then(response => response.json())
            .then(data => {
                document.title = data.title;
            })
            .catch(() => {
                document.title = 'App - 透かしの確認';
            });
        
        let selectedFile = null;

        function handleDragOver(e) {
            e.preventDefault();
        }

        function handleDragEnter(e) {
            e.preventDefault();
            e.currentTarget.classList.add('border-accent');
        }

        function handleDragLeave(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('border-accent');
        }

        function handleDrop(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('border-accent');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                handleFileSelect({target: {files: files}});
            }
        }

        function handleFileSelect(e) {
            const file = e.target.files[0];
            if (file) {
                selectedFile = file;
                document.getElementById('file-name').textContent = file.name + ' (' + (file.size / 1024 / 1024).toFixed(2) + 'MB)';
                document.getElementById('selected-file').classList.remove('hidden');
                document.getElementById('verify-btn').disabled = false;
            }
        }

        function clearFile() {
            selectedFile = null;
            document.getElementById('file-input').value = '';
            document.getElementById('selected-file').classList.add('hidden');
            document.getElementById('verify-btn').disabled = true;
        }

        async function verifyWatermark() {
            if (!selectedFile) {
                alert('画像を選択してください');
                return;
            }

            const formData = new FormData();
            formData.append('image', selectedFile);

            const btn = document.getElementById('verify-btn');
            const originalText = btn.innerHTML;
            btn.innerHTML = '<span class="loading loading-spinner loading-sm"></span> 解析中...';
            btn.disabled = true;

            try {
                const response = await fetch('/api/verify-watermark', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.verification_id) {
                        const statusHtml = `
                            <div class="alert alert-info">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <div>
                                    <h3 class="font-bold">検証を開始しました</h3>
                                    <p class="text-sm">検証ID: ${result.verification_id}</p>
                                    <p class="text-sm">処理には1-2分かかります。結果ページに自動で移動します...</p>
                                </div>
                            </div>
                        `;
                        document.getElementById('result').innerHTML = statusHtml;
                        document.getElementById('result').classList.remove('hidden');
                        
                        // Redirect to result page after 3 seconds
                        setTimeout(() => {
                            window.location.href = result.check_url;
                        }, 3000);
                    } else {
                        const errorHtml = `
                            <div class="alert alert-error">
                                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span>検証に失敗しました: ${result.error || 'Unknown error'}</span>
                            </div>
                        `;
                        document.getElementById('result').innerHTML = errorHtml;
                        document.getElementById('result').classList.remove('hidden');
                    }
                } else {
                    const errorData = await response.json();
                    const errorHtml = `
                        <div class="alert alert-error">
                            <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <span>エラー: ${errorData.error || 'Unknown error'}</span>
                        </div>
                    `;
                    document.getElementById('result').innerHTML = errorHtml;
                    document.getElementById('result').classList.remove('hidden');
                }
            } catch (error) {
                console.error('Upload error:', error);
                const errorHtml = `
                    <div class="alert alert-error">
                        <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span>アップロードエラーが発生しました: ${error.message}</span>
                    </div>
                `;
                document.getElementById('result').innerHTML = errorHtml;
                document.getElementById('result').classList.remove('hidden');
            } finally {
                btn.innerHTML = originalText;
                btn.disabled = false;
            }
        }
    </script>
</Layout>